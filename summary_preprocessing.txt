{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Summary</th>\n",
       "      <th>Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>445</th>\n",
       "      <td>\"It Is as It Was!\" True, Even If Not Said!</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>450</th>\n",
       "      <td>Tough Passion</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>452</th>\n",
       "      <td>The Passion of Mel Gibson</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>453</th>\n",
       "      <td>2.5 stars</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>454</th>\n",
       "      <td>Powerful.</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1396617</th>\n",
       "      <td>Anderson's movies keep getting better (althoug...</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1396623</th>\n",
       "      <td>Many stars, but it works well with the film</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1396625</th>\n",
       "      <td>Ornate Silliness</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1396627</th>\n",
       "      <td>Meandering story</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1396630</th>\n",
       "      <td>and all the other fine actors in this tale of ...</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>190254 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   Summary  Score\n",
       "445             \"It Is as It Was!\" True, Even If Not Said!    5.0\n",
       "450                                          Tough Passion    5.0\n",
       "452                              The Passion of Mel Gibson    1.0\n",
       "453                                              2.5 stars    2.0\n",
       "454                                              Powerful.    4.0\n",
       "...                                                    ...    ...\n",
       "1396617  Anderson's movies keep getting better (althoug...    3.0\n",
       "1396623        Many stars, but it works well with the film    5.0\n",
       "1396625                                   Ornate Silliness    2.0\n",
       "1396627                                   Meandering story    3.0\n",
       "1396630  and all the other fine actors in this tale of ...    5.0\n",
       "\n",
       "[190254 rows x 2 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "train = pd.read_csv(\"./data/X_train.csv\")\n",
    "test = pd.read_csv(\"./data/X_test.csv\")\n",
    "\n",
    "movieNums= train['ProductId'].value_counts()\n",
    "movieNums= movieNums.loc[movieNums.values > 150]\n",
    "movieNums = movieNums.keys().tolist()\n",
    "reducedTrain = train[train['ProductId'].isin(movieNums)]\n",
    "\n",
    "userNums= reducedTrain['UserId'].value_counts()\n",
    "userNums= userNums.loc[userNums.values > 8]\n",
    "userNums = userNums.keys().tolist()\n",
    "reducedTrain = reducedTrain[reducedTrain['UserId'].isin(userNums)]\n",
    "\n",
    "txtTrain= reducedTrain[['Summary', 'Score']]\n",
    "len(txtTrain)\n",
    "txtTrain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'true even said'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "import nltk.data\n",
    "import string\n",
    "import nltk\n",
    "import re\n",
    "\n",
    "def review_to_words (review):\n",
    "    rev = re.sub('[^a-zA-Z]', ' ', review)\n",
    "    words = rev.lower().split()\n",
    "    stops = set(stopwords.words('english'))\n",
    "    words = [w for w in words if not w in stops]\n",
    "    stemmer = SnowballStemmer('english')\n",
    "    words = [stemmer.stem(w) for w in words]\n",
    "    return (' '.join(words))\n",
    "\n",
    "review_to_words(txtTrain['Summary'].iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clean_train = []\n",
    "for i in range(0, len(txtTrain)):\n",
    "    if (i+1)%1000 == 0:\n",
    "        print('Review {} of {}'.format(i+1, len(txtTrain)))\n",
    "    clean_train.append(review_to_words(txtTrain['Summary'].iloc[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "vectorizer = CountVectorizer(analyzer= \"word\",\n",
    "                                    tokenizer= None,\n",
    "                                    preprocessor = None,\n",
    "                                    max_df = 0.5,\n",
    "                                    min_df = 2,\n",
    "                                    ngram_range=(1,3),\n",
    "                                    stop_words = None,\n",
    "                                    max_features = 6000)\n",
    "\n",
    "train_data_features = vectorizer.fit_transform(clean_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(190254, 6000)\n"
     ]
    }
   ],
   "source": [
    "print(train_data_features.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\3eypa\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\utils\\deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['abbey',\n",
       " 'abbey season',\n",
       " 'abduct',\n",
       " 'abid',\n",
       " 'abl',\n",
       " 'aboard',\n",
       " 'abound',\n",
       " 'abraham',\n",
       " 'abraham lincoln',\n",
       " 'abram']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab = vectorizer.get_feature_names()\n",
    "vocab[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>abbey</th>\n",
       "      <th>abbey season</th>\n",
       "      <th>abduct</th>\n",
       "      <th>abid</th>\n",
       "      <th>abl</th>\n",
       "      <th>aboard</th>\n",
       "      <th>abound</th>\n",
       "      <th>abraham</th>\n",
       "      <th>abraham lincoln</th>\n",
       "      <th>abram</th>\n",
       "      <th>...</th>\n",
       "      <th>zero star</th>\n",
       "      <th>zodiac</th>\n",
       "      <th>zombi</th>\n",
       "      <th>zombi film</th>\n",
       "      <th>zombi flick</th>\n",
       "      <th>zombi movi</th>\n",
       "      <th>zombi movi ever</th>\n",
       "      <th>zombieland</th>\n",
       "      <th>zone</th>\n",
       "      <th>zoo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>58</td>\n",
       "      <td>20</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>27</td>\n",
       "      <td>19</td>\n",
       "      <td>18</td>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>22</td>\n",
       "      <td>...</td>\n",
       "      <td>51</td>\n",
       "      <td>20</td>\n",
       "      <td>640</td>\n",
       "      <td>53</td>\n",
       "      <td>51</td>\n",
       "      <td>123</td>\n",
       "      <td>18</td>\n",
       "      <td>23</td>\n",
       "      <td>57</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 6000 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   abbey  abbey season  abduct  abid  abl  aboard  abound  abraham  \\\n",
       "0     58            20      18    19   27      19      18       25   \n",
       "\n",
       "   abraham lincoln  abram  ...  zero star  zodiac  zombi  zombi film  \\\n",
       "0               20     22  ...         51      20    640          53   \n",
       "\n",
       "   zombi flick  zombi movi  zombi movi ever  zombieland  zone  zoo  \n",
       "0           51         123               18          23    57   31  \n",
       "\n",
       "[1 rows x 6000 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist = np.sum(train_data_features, axis = 0)\n",
    "pd.DataFrame(dist, columns = vocab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\3eypa\\AppData\\Local\\Temp\\ipykernel_2948\\2433323490.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  txtTrain['Sentiment'] = txtTrain['Score'].apply(score_preprocessing)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Summary</th>\n",
       "      <th>Score</th>\n",
       "      <th>Sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>445</th>\n",
       "      <td>\"It Is as It Was!\" True, Even If Not Said!</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>450</th>\n",
       "      <td>Tough Passion</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>452</th>\n",
       "      <td>The Passion of Mel Gibson</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>453</th>\n",
       "      <td>2.5 stars</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>454</th>\n",
       "      <td>Powerful.</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        Summary  Score Sentiment\n",
       "445  \"It Is as It Was!\" True, Even If Not Said!    5.0         1\n",
       "450                               Tough Passion    5.0         1\n",
       "452                   The Passion of Mel Gibson    1.0        -1\n",
       "453                                   2.5 stars    2.0        -1\n",
       "454                                   Powerful.    4.0         1"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def score_preprocessing(value):\n",
    "    if value <= 2:\n",
    "        return '-1'\n",
    "    elif value == 3:\n",
    "        return '0'\n",
    "    else: \n",
    "        return '1'\n",
    "\n",
    "txtTrain['Sentiment'] = txtTrain['Score'].apply(score_preprocessing) \n",
    "txtTrain.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "forest = RandomForestClassifier(\n",
    "    n_estimators = 100, n_jobs = -1, random_state = 13, max_depth = 8)\n",
    "\n",
    "forest = forest.fit(train_data_features, txtTrain['Sentiment'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Review 5000 of 300000\n",
      "Review 10000 of 300000\n",
      "Review 15000 of 300000\n",
      "Review 20000 of 300000\n",
      "Review 25000 of 300000\n",
      "Review 30000 of 300000\n",
      "Review 35000 of 300000\n",
      "Review 40000 of 300000\n",
      "Review 45000 of 300000\n",
      "Review 50000 of 300000\n",
      "Review 55000 of 300000\n",
      "Review 60000 of 300000\n",
      "Review 65000 of 300000\n",
      "Review 70000 of 300000\n",
      "Review 75000 of 300000\n",
      "Review 80000 of 300000\n",
      "Review 85000 of 300000\n",
      "Review 90000 of 300000\n",
      "Review 95000 of 300000\n",
      "Review 100000 of 300000\n",
      "Review 105000 of 300000\n",
      "Review 110000 of 300000\n",
      "Review 115000 of 300000\n",
      "Review 120000 of 300000\n",
      "Review 125000 of 300000\n",
      "Review 130000 of 300000\n",
      "Review 135000 of 300000\n",
      "Review 140000 of 300000\n",
      "Review 145000 of 300000\n",
      "Review 150000 of 300000\n",
      "Review 155000 of 300000\n",
      "Review 160000 of 300000\n",
      "Review 165000 of 300000\n",
      "Review 170000 of 300000\n",
      "Review 175000 of 300000\n",
      "Review 180000 of 300000\n",
      "Review 185000 of 300000\n",
      "Review 190000 of 300000\n",
      "Review 195000 of 300000\n",
      "Review 200000 of 300000\n",
      "Review 205000 of 300000\n",
      "Review 210000 of 300000\n",
      "Review 215000 of 300000\n",
      "Review 220000 of 300000\n",
      "Review 225000 of 300000\n",
      "Review 230000 of 300000\n",
      "Review 235000 of 300000\n",
      "Review 240000 of 300000\n",
      "Review 245000 of 300000\n",
      "Review 250000 of 300000\n",
      "Review 255000 of 300000\n",
      "Review 260000 of 300000\n",
      "Review 265000 of 300000\n",
      "Review 270000 of 300000\n",
      "Review 275000 of 300000\n",
      "Review 280000 of 300000\n",
      "Review 285000 of 300000\n",
      "Review 290000 of 300000\n",
      "Review 295000 of 300000\n",
      "Review 300000 of 300000\n"
     ]
    }
   ],
   "source": [
    "clean_test = []\n",
    "for i in range(0, len(test)):\n",
    "    if (i+1)%5000 == 0:\n",
    "        print('Review {} of {}'.format(i+1, len(test)))\n",
    "    clean_test.append(review_to_words(test['Summary'].iloc[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "clean_1 = clean_test[:100000]\n",
    "clean_2 = clean_test[100000:200000]\n",
    "clean_3 = clean_test[200000:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data_features1 = vectorizer.transform(clean_test)\n",
    "test_data_features1 = test_data_features1.toarray()\n",
    "\n",
    "result1 = forest.predict(test_data_features1)\n",
    "\n",
    "output = pd.DataFrame(data = {\"Id\": test['Id'], \"Sentiment\": result1})\n",
    "output.to_csv(\"summarySentiment2.csv\", index= None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test_data_features2 = vectorizer.transform(clean_2)\n",
    "# test_data_features2 = test_data_features2.toarray()\n",
    "\n",
    "# result2 = forest.predict(test_data_features2)\n",
    "\n",
    "# output = pd.DataFrame(data = {\"Id\": test['Id'][100000:200000], \"Sentiment\": result2})\n",
    "# output.to_csv(\"newresult2_sum.csv\", index= None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test_data_features3 = vectorizer.transform(clean_3)\n",
    "# test_data_features3 = test_data_features3.toarray()\n",
    "\n",
    "# result3 = forest.predict(test_data_features3)\n",
    "\n",
    "# output = pd.DataFrame(data = {\"Id\": test['Id'][200000:], \"Sentiment\": result3})\n",
    "# output.to_csv(\"newresult3_sum.csv\", index= None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# result1 = pd.read_csv(\"newresult1.csv\")\n",
    "# result2 = pd.read_csv(\"newresult2.csv\")\n",
    "# result3 = pd.read_csv(\"newresult3.csv\")\n",
    "# result = pd.concat([result1, result2])\n",
    "# result = pd.concat([result, result3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# result.to_csv(\"textSentiment2.csv\", index= None)\n",
    "# result.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Review 5000 of 10000\n",
      "Review 10000 of 10000\n"
     ]
    }
   ],
   "source": [
    "sampleTest = train.sample(n=10000)\n",
    "sampleTest\n",
    "\n",
    "clean_sample = []\n",
    "for i in range(0, len(sampleTest)):\n",
    "    if (i+1)%5000 == 0:\n",
    "        print('Review {} of {}'.format(i+1, len(sampleTest)))\n",
    "    clean_sample.append(review_to_words(sampleTest['Summary'].iloc[i]))\n",
    "\n",
    "test_data_features = vectorizer.transform(clean_sample)\n",
    "test_data_features = test_data_features.toarray()\n",
    "\n",
    "result = forest.predict(test_data_features)\n",
    "result\n",
    "output = pd.DataFrame(data = {\"Id\": sampleTest['Id'], \"Summary\": sampleTest['Summary'], \"Original_Sentiment\": sampleTest['summSentiment'], \"Result_Sentiment\": result})\n",
    "output.to_csv(\"sampleSummary.csv\", index= None)    "
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "55f881645833b0ff5773e68d59b2dc9dc9902af6bb910a3164321a63ab13a7eb"
  },
  "kernelspec": {
   "display_name": "Python 3.10.2 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
